# main.py
import time
import json
import argparse
from src import api, db, parser, utils
from src.config import DEFAULT_POSITION_CODES, DEFAULT_ACCOUNT_TYPES, PAGE_SIZE
from src.logger import logger

def main():
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    arg_parser = argparse.ArgumentParser(description="TenChat user fetcher")
    arg_parser.add_argument("--start-page", type=int, help="–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ë–î progress)")
    arg_parser.add_argument("--end-page", type=int, help="–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏–¥—ë—Ç –ø–æ –ª–∏–º–∏—Ç—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)")
    args = arg_parser.parse_args()

    session = input("–í–≤–µ–¥–∏—Ç–µ SESSION cookie: ").strip()

    settings = db.get_settings()
    request_limit = settings["request_limit"]
    delay_min = settings["delay_min_sec"]
    delay_max = settings["delay_max_sec"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = args.start_page if args.start_page else db.get_progress()
    end_page = args.end_page if args.end_page else (page + request_limit - 1)

    i = 0
    while page <= end_page:
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å {i + 1}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        start_time = time.time()

        response = api.fetch_users(session, page, PAGE_SIZE, DEFAULT_POSITION_CODES, DEFAULT_ACCOUNT_TYPES)
        if not response:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            break

        duration = round(time.time() - start_time, 2)
        logger.info(f"‚è± –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {duration} —Å–µ–∫.")
        logger.debug("üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:")
        # logger.debug(json.dumps(response, indent=2, ensure_ascii=False))

        users = parser.parse_users(response)
        logger.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

        if users:
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î...")
            db.save_users(users)
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

        db.log_request(session_token=session, page=page, response_time=duration, user_count=len(users))
        db.set_progress(page + 1)

        page += 1
        i += 1

        if page > end_page:
            logger.info("üìå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
            break

        utils.sleep_random(delay_min, delay_max)

    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main()
