import sys
import os
import time
import json
from datetime import datetime
from src import api, db, parser, utils
from src.config import DEFAULT_POSITION_CODES, DEFAULT_ACCOUNT_TYPES, PAGE_SIZE
from src.logger import logger

def main():
    session = input("–í–≤–µ–¥–∏—Ç–µ SESSION cookie: ").strip()

    settings = db.get_settings()
    request_limit = settings["request_limit"]
    delay_min = settings["delay_min_sec"]
    delay_max = settings["delay_max_sec"]

    page = 1
    for i in range(request_limit):
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å {i+1} –∏–∑ {request_limit}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

        start_time = time.time()
        response = api.fetch_users(session, page, PAGE_SIZE, DEFAULT_POSITION_CODES, DEFAULT_ACCOUNT_TYPES)

        if not response:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            break

        duration = round(time.time() - start_time, 2)
        logger.info(f"‚è± –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {duration} —Å–µ–∫.")

        logger.debug("üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:")
        logger.debug(json.dumps(response, indent=2, ensure_ascii=False))

        users = parser.parse_users(response)
        logger.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

        if users:
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î...")
            db.save_users(users)
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

        db.log_request(session_token=session, page=page, response_time=duration, user_count=len(users))

        page += 1
        utils.sleep_random(delay_min, delay_max)

    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main()
